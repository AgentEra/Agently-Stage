[project]
name = "agently-stage"
version = "0.2.0-preview-20250206"
description = "Agently Stage - Efficient Convenient Asynchronous and Multithreaded Programming"
authors = [
    { name = "Agently Team", email = "developer@agently.tech" },
    { name = "Maplemx", email = "maplemx@gmail.com" },
]
license = "Apache-2.0"
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
]
keywords = ["agently", "async", "multithreading", "EventEmitter"]

[project.urls]
Homepage = "https://agently.tech"
Documentation = "https://github.com/AgentEra/Agently-Stage/blob/main/README.md"
Repository = "https://github.com/AgentEra/Agently-Stage"
Issues = "https://github.com/AgentEra/Agently-Stage/issues"

[dependency-groups]
dev = [
    "pytest>=8.3.4",
    "pytest-benchmark>=5.1.0",
    "pytest-rerunfailures>=15.0",
]

[tool.ruff]
line-length = 120
target-version = "py39"

[tool.ruff.lint]
select = [
  # Pyflakes
  "F",
  # Pycodestyle
  "E",
  "W",
  # Isort
  "I",
  # Comprehensions
  "C4",
  # Debugger
  "T100",
  # Pyupgrade
  "UP",
  # Flake8-pyi
  "PYI",
  # Bugbear
  "B",
  # Pylint
  "PLE",
  # Flake8-simplify
  "SIM101",
  # Flake8-use-pathlib
  "PTH",
  # Pygrep-hooks
  "PGH004",
  # Flake8-type-checking
  "TC",
  # Flake8-raise
  "RSE",
  # Refurb
  "FURB",
  # Flake8-future-annotations
  "FA",
  # Yesqa
  "RUF100",
]
ignore = [
  "E501", # line too long, duplicate with ruff fmt
  "F401", # imported but unused, duplicate with pyright
  "F841", # local variable is assigned to but never used, duplicate with pyright
]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]
known-first-party = ["agently_stage"]
combine-as-imports = true

[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = ["pydantic.BaseModel"]

[tool.ruff.lint.per-file-ignores]
"examples/readme_examples.ipynb" = ["B018"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
